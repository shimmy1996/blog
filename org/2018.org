#+HUGO_BASE_DIR: ../
#+HUGO_SECTION: ./posts
#+OPTIONS: author:nil

* TODO Review of the Last Jedi
:PROPERTIES:
:EXPORT_HUGO_CUSTOM_FRONT_MATTER: :date 2018-01-03 :slug my-review-of-the-last-jedi
:END:

** TODO en
:PROPERTIES:
:EXPORT_TITLE: My Review of the Last Jedi [Spolier Alert]
:EXPORT_FILE_NAME: 2018-01-03-my-review-of-the-last-jedi.en.md
:END:

Sadly, unlike Princess Leia, Carrie Fisher could not come back to life.
This is dedicated to Carrie Fisher.

What I hated:
1. Starting out, Poe feels nothing about his fellows dying. "But we blew up a
   Dreadnaught!?" Also the ridiculous conversation btw Poe and Hux makes it
   really hard to take any of the bad guys seriously, including snoke and hux,
   they are
2. Leia using force: unexpected, but okay. No harm and no gain.
3. Why is Luke so OOO? Why would he doubt his own niece if he sees good in his
   father. I'm okay with this looking just at 7&8, but considering 4-6?
   unacceptable.
4. Where did other jedis following kylo go?
5. The burnt jedi classics were in the falcon at the end, wtf luke and yoda?
6. Luke squeezing milk from giant female Wattos?
7. General snoke been stroke down without much explanation. He can force choke
   ppl light years away but can't tell Kylo is fooling him? He could read kylo's
   mind but couldn't stop Kylo from stabbing him? or I guess that's how rules of
   two work now.
8. Why struggle so badly fighting the guards? No point? cut to the next scene already!
9. Yoda summoning lightning!? Welcome to see a more puppet like yoda but talk
   was too cliche. Yoda's lesson: teach her your failures as well. other parts are bad.
10.Maz WTF!? who is this rando master code breaker wearing some stupid flower in a casino
11.Henikein beer guy as DJ, did he die? No point!? Why was he able to
passthrough the shield!?
12.Not too old this time around to start training?(i guess that's not the point)
13.Kylo long controlled by Snoke, how did he escape? why was he still so unsure
14.Hux was never an appropriate enemy
15.Snoke just appears after all these buildup? Nothing special? Force lightning?
although I guess dooku is guilty of the same stuff but hey at least he fought well.
16.Canto Bight casino was pointless, DJ was pointless. Yes I get they are
mimicking the bar scene from new hope, but it's not there.
17.Structurally, the time line is fucked up. We have three lines of narrative
with two different time lines (Rey's one being stretched much forward) and
syncing back together (unless there is some GR bullshit about the rebel fleet's
time passing slower) etc. Finally they merge into a not so epic fight and another
not so epic fight and then another not so epic fight on Crait (red salt version
of hoth).
18.why the hell deliberately kill off Holdo, just have some droid pilot the
ship. "We've used to lose ppl?" you kept 3po for the longest time for god's sake
19.If they are going the route of killing of the concept of jedi, which makes
sense if they never called snoke sith, just practitioners of dark side, why the
hell reviving the concept in Crait fight scene? Otherwise why mentioning Rey has
such potential in the dark side?
20.owl-penguin toy commercials
21.Rey's parentage doesn't really matter anymore since she is so strong with the
force.
22. Outer rim allies? any followup on this? or is this just another one off
   thing?
23.Luke: yeah, that's pretty much nowhere. Says the farm boy from
Tatooine. "Every word you just said was wrong"
24.Wtf is this spark speech. And wtf Leia slaps Poe. The resistance is fucked
for sure.
25.the red guards doesn't make sense
26.no real development in Rey
27.Luke's story told three times in different fashions!?
28.Kylo stroke luke down and yet can't defeat red ninja guards?
29.Luke's reaction about Han was only one line

What I liked:
1. Rey and Kylo(Ben) connecting. Kylo's transition, his wounds by
   Rey. Confrontation of his feelings. Rey said he is a monster yet begs to luke
   that there is good in him. Rain transfer via force connection.
2. The part where Rey and Kylo fighting for Anakin's lightsaber was pretty good,
   besides we finally get closeups on lightsabers!
3. Luke cloaked himself from using the force? can tell from he not owning his
   light saber anymore
4. little boy telling luke's tales and he seems to be using force to get the
   broom? slave? young force user? ring a bell?
5. Kylo didn't pull the trigger, unlike Han
6. Luke saying laser sword.
7. What Luke really see in Rey was puzzling: dark side of the force? How is this
   reconciled? He walked away seeing Rey lost in anger wielding light saber to
   the rock.
8. Luke taught Rey two lessons, where is the third?
9. Luke never read the jedi classics
10.Rose was a likable character, not counting the transition between losing her
sister and engaging new plan following Poe, who effectively killed her sister in
a suicide mission.
11.Solo's dice chains, although now has strange numbers. the real ones were
picked up by kylo ren
12.Luke winking at 3po
13.Hyperspace strike
14.Admiral Akabar

Notable plots
1. Leia and the underground hole. Explanation: curiosity and desire to know her
   parentage are paths to the dark side? maps directly to Cave of Evil/dark
   force cave.
2. Finn kinda knows it was his fault so he wanted to sacrifice himself for the
   rebels. But what was he doing in the casino!?
3. The scene luke passed away, duel sun setting was exactly the same as a new
   hope.
4. fighting for lightsaber btw Kylo and Rey was great
5. Kylo didn't have his own lightsaber. ? didn't he have his lightsaber on the
   belt? at least it was there when he was waken by Hux
6. "Why did you stop me" "I saved you", okay cmon it's star wars
7. R2 playing the original Leia clip.
8. Maybe hinting so many force usages in the film is to emphasize there will be
   more jedi?
* DONE My Very Own Avatar Icon Thingy
:PROPERTIES:
:EXPORT_HUGO_CUSTOM_FRONT_MATTER: :date 2018-01-15 :slug my-very-own-avatar-icon-thingy
:END:

** DONE en
:PROPERTIES:
:EXPORT_TITLE: My Very Own Avatar Icon Thingy
:EXPORT_FILE_NAME: 2018-01-15-my-very-own-avatar-icon-thingy.en.md
:END:

I have been using the symbol for the Old Republic from Star Wars as my goto profile picture for quite sometime. In my attempt to maintain a consistent social network profile over multiple websites, I gradually come to realize that profile picture is the most intuitive way to establish a identity (I guess this is also why services like Gravatar would +be so popular+ exist ). In this case, using a picture from [[http://starwars.wikia.com/wiki/Old_Republic][Wookiepedia]] that everyone has access to is probably not the brightest idea. Thus, I set out to create my very own avatar icon thingy.

Since I don't consider myself to have even the least amount of artistic talent, I started out spending quite some time in GeoGebra trying to reconstruct the Old Republic symbol in a systematic way. Filling up my screen with circles and measurements is fun and surprisingly addicting, yet after several hours, I only ended up with a confusing hodgepodge of curves.

#+CAPTION: One of my failed GeoGebra attempts.
[[/img/posts/2018/my-very-own-avatar-icon-thingy-01.png]]

It is obvious at that point that I won't be able to recreate anything nearly as complicated as the Old Republic symbol, so I started stripping out a more abstract version of it.

#+CAPTION: My process of streamlining the logo.
[[/img/posts/2018/my-very-own-avatar-icon-thingy-02.png]]

I isolated out the "rising star" part of the original logo and discarded the wing-shaped portions to center the star. Instead of a rising star, I went for the impression of a shooting star and it turned out extremely well (in my opinion at least). With delight, I settled on the logo design a few minutes later. I kept the dark red color scheme (though I actually used =#700000= instead of the original =#710100= because I hate dangling ones) and added a gray background (=#707070=) as using white seemed too bright for me.

#+CAPTION: Final design as shown on my Twitter profile.
[[/img/posts/2018/my-very-own-avatar-icon-thingy-03.png]]

I also played around with several alternative color schemes, i.e. inverted versions. Maybe I will use these as icons for other projects. So far, I have updated all my actively used social network profiles and changed the favicon of this blog. Hopefully this icon would be unique enough for others to recognize me across different social networks.

** DONE zh
:PROPERTIES:
:EXPORT_TITLE: 自己画头像
:EXPORT_FILE_NAME: 2018-01-15-my-very-own-avatar-icon-thingy.zh.md
:END:

我使用星球大战中旧共和国的标志作为头像已经有不短的时间了。不过最近，当我试图统一我所有的“社交网络人格”时，我意识到独特的头像往往是最为直接的在网上认人的方式（这大概就是为何 Gravatar 这类服务 +如此受欢迎+ 会存在）。这么一想，拿 [[http://starwars.wikia.com/wiki/Old_Republic][Wookiepedia]] 上的图片直接作为头像不是什么明智的行为。于是我决定：自己画头像！

由于我并不觉得自己有多少艺术细胞，我最初尝试的方法是在 GeoGebra 里用尺规作图复制原来的头像。这种作图方式很是让人上瘾，但遗憾的是：在荒废几个小时后，我得到的只是一堆纠缠不清的曲线。

#+CAPTION: GeoGebra 中的诸多失败作之一。
[[/img/posts/2018/my-very-own-avatar-icon-thingy-01.png]]

事已至此，我开始意识到我是画不出像旧共和国标志的那样复杂的头像的，所以我采取了另外一种策略：从这些失败作中抽取一个更加简练的图样。

#+CAPTION: 我逐渐简化头像的过程。
[[/img/posts/2018/my-very-own-avatar-icon-thingy-02.png]]

我把原图里六芒星升起的部分提取出来，并舍去了碍事的翅膀形部分使得星形能够居中。经过少许修改后更接近流星的图样看起来（至少对我来说）非常赞。在短短几分钟后，我就完成了我的头像设计。我保留了旧头像的暗红的配色（实际用的是 =#700000= 而不是原图的 =710100= ，因为我有个位数字强迫症）并加上了灰色的背景（ =#707070= ，白色背景有点太刺眼了）。

#+CAPTION: 我推特资料上的完成版头像。
[[/img/posts/2018/my-very-own-avatar-icon-thingy-03.png]]

我还尝试了其他不同的配色，比如反色版本，以后可能会拿来作为我其他项目的图标。我所有还活跃的社交网站都已经换上了新头像，包括网站图标。这下大家应该可以更容易地在不同网站上认出我了XD。

* DONE Trying Out Mastodon
:PROPERTIES:
:EXPORT_HUGO_CUSTOM_FRONT_MATTER: :date 2018-02-11 :slug trying-out-mastodon
:END:

** DONE en
:PROPERTIES:
:EXPORT_TITLE: Trying Out Mastodon
:EXPORT_FILE_NAME: 2018-02-11-trying-out-mastodon.en.md
:END:

As mentioned in my [[https://www.shimmy1996.com/en/posts/2017/10/22/no-more-disqusting-disqus/][previous post]], I am not really accustomed to posting on social networks. However, the other day I encountered a term I haven't heard in a long time: micro-blogging. Yes, quite a few social networks, Twitter for instance, is before anything a micro-blogging service. This definition of Twitter makes it immensely more appealing to me: it's a bite-sized blog for random thoughts, funny incidents, and many other pieces of my life that might not fit well with a regular blog post. However, I still find posting on Twitter has the 'broadcasting to the entire Internet' feeling stamped into it. Guess I'll just host my own then.

[[https://github.com/tootsuite/mastodon][Mastodon]] turned out to be one such solution. Mastodon's federated and decentralized nature makes it ideal for someone like me who struggles between building my online identity while minimizing the number of different companies I expose my information to. If people are willing to give away their personal information for fancy profile pictures, then hosting a Mastodon wouldn't seem like such a bad deal.

*** Installation on Arch Linux
It was kinda surprising that there doesn't exist a Arch Linux specific installation guide for Mastodon. Not that the installation process would be more difficult on Arch Linux than Ubuntu, but installation can be made a lot due simpler to the abundance of packages. Since the [[https://github.com/tootsuite/documentation/blob/master/Running-Mastodon/Production-guide.md][official production guide]] is already fairly comprehensive, I'll just document some Arch Linux specific steps here.

**** Dependencies
Here's a table detailing all the dependencies and their corresponding packages in Arch Linux. There really is no need to git clone anything. =npm= was also required in the installation process, but was not listed in the official guide.

| Dependency                            | Package                                                                                       |
| =node.js= 6.x                         | [[https://www.archlinux.org/packages/community/x86_64/nodejs-lts-boron/][=nodejs-lts-boron=]] |
| =yarn=                                | [[https://www.archlinux.org/packages/community/any/yarn/][=yarn=]]                            |
| =imagemagick=                         | [[https://www.archlinux.org/packages/extra/x86_64/imagemagick/][=imagemagick=]]               |
| =ffmpeg=                              | [[https://www.archlinux.org/packages/extra/x86_64/ffmpeg/][=ffmpeg=]]                         |
| =libprotobuf= and =protobuf-compiler= | [[https://www.archlinux.org/packages/?sort=&q=protobuf&maintainer=&flagged=][=protobuf=]]     |
| =nginx=                               | [[https://www.archlinux.org/packages/extra/x86_64/nginx/][=nginx=]]                           |
| =redis=                               | [[https://www.archlinux.org/packages/community/x86_64/redis/][=redis=]]                       |
| =postgresql=                          | [[https://www.archlinux.org/packages/extra/x86_64/postgresql/][=postgresql=]]                 |
| =nodejs=                              | [[https://www.archlinux.org/packages/community/x86_64/nodejs/][=nodejs=]]                     |
| =rbenv=                               | [[https://aur.archlinux.org/packages/rbenv/][=rbenv=]]                                        |
| =ruby-build=                          | [[https://aur.archlinux.org/packages/ruby-build/][=ruby-build=]]                              |
| =npm=                                 | [[https://www.archlinux.org/packages/community/any/npm/][=npm=]]                              |

For =rbenv=, I needed to add =eval "$(rbenv init -)"= to =.bashrc= or =.zshrc= after installation as prompted by the post installation script.

**** Mastodon
Create user =mastodon= and to =sudoers= using =visudo=.
#+BEGIN_SRC sh
  useradd -m -G wheel -s /bin/bash mastodon
#+END_SRC

Then I can clone the repository and start [[https://github.com/tootsuite/documentation/blob/master/Running-Mastodon/Production-guide.md#nodejs-and-ruby-dependencies][installing node.js and ruby dependencies]]. This is where =npm= is required. Besides, I encountered a =ENONT= error when running =yarn= saying =./.config/yarn/global/.yarnclean= is missing, which is resolved by creating the file.

**** PostgreSQL
In addition to installing the =postgresql= package, I followed [[https://wiki.archlinux.org/index.php/PostgreSQL][Arch Wiki]] to initialize the data cluster:

#+BEGIN_SRC sh
  $ sudo su postgres
  [postgres]$ initdb --locale $LANG -E UTF8 -D '/var/lib/postgres/data'
#+END_SRC

After starting and enabling =postgresql= with =systemctl=, I can then start the =psql= shell as the =postgres= user and create user for Mastodon (use =psql= command =\du= to check the user is actually there):

#+BEGIN_SRC sh
  $ sudo su postgres
  [postgres]$ psql
  [psql]# CREATE USER mastodon CREATEDB;
  [psql]# \q
#+END_SRC

Port selection is customizable in =postgresql.service= and the port number will be used in =.env.porduction= customization.

**** Redis
Pretty much the same drill as =postgresql=, I installed =redis= and start/enabled =redis.service=. The port selection and address that have access can all be configured from =/etc/redis.conf=.

**** Nginx & Let's Encrypt
The official production guide covers this part pretty well already.

**** =.env.production=
The config file is fairly self-explanatory. The only thing I got wrong the first time is the variable =DB_HOST= for =postgresql=. I then obtained the correct path, =/run/postgresql=, by checking status of =postgresql.service=.

**** Scheduling Services & Cleanups
Again, just follow the official production guide. I installed [[https://www.archlinux.org/packages/core/x86_64/cronie/][=cronie=]] to schedule cron jobs.

*** My Experience
The web interface is fairly good, I like how I can write toots while browsing timelines instead of been forced to stay at the top of the page. I tried out quite a few Mastodon clients on my phone and I settled on [[https://pawoo.net/about][Pawoo]], which is built by Pixiv. So far Mastodon feels like a more comfy twitter to me and a platform where I am actually willing to write on. I'm pushing myself to write something on Mastodon every few days. So far it's been mostly running logs, but I'll come up more stuff to post in the future.

One thing I would really like to see though is multilingual post support in Mastodon. A workaround I currently use is appending different tags for Chinese vs. English posts, which not only bloats my toots, but also fragmented my timeline so that it's only 50% comprehensible for most people. Regrettably, it seems that out of the various micro-blogging/social networking services, only [[https://code.facebook.com/posts/597373993776783][Facebook]] has something similar to this at the moment.

In the footer section, I've replaced Twitter with [[https://mstdn.shimmy1996.com/@shimmy1996][my Mastodon profile]]. Feel free to take a peek inside. :P

** DONE zh
:PROPERTIES:
:EXPORT_TITLE: Mastodon 尝鲜
:EXPORT_FILE_NAME: 2018-02-11-trying-out-mastodon.zh.md
:END:

我在 [[https://www.shimmy1996.com/zh/posts/2017/10/22/no-more-disqusting-disqus/][上一篇日志]] 里提到过，我并不习惯于在社交网络上发帖子。不过不久之前，我偶然撞见了一个很久没有听到过的词：微型博客。不少社交网络站点，例如 Twitter ，本质上还是一个微型博客服务。这种定义下的 Twitter 对我更加具有吸引力：我可以把一些随想，趣事和生活中其他不大适合写进博客的点点滴滴塞进去。但即使如此，我还是发推有一种“向整个互联网发送座标”的感觉。嗯，那么只好自己搭建一个微型博客了。

[[https://github.com/tootsuite/mastodon][Mastodon]] 就是一个很好的解决方案。对与在最大化网络人格和最小化个人信息泄露之间进退两难的我来说，存储去中心化、但实例之间又紧密相联的 Mastodon 非常理想。如果人们愿意为了好看的头像将个人信息拱手送出的话，搭建一个 Mastodon 实例可以算得上是一个划算的多的买卖。

*** 在 Arch Linux 上安装 Mastodon
我在一番搜寻后，居然没有找到一篇专门针对 Arch Linux 的 Mastodon 安装指南，这有点让我惊讶。不过得益于丰富的软件包，在 Arch Linux 上安装 Mastodon 其实比在 Ubuntu 上更加简单。 [[https://github.com/tootsuite/documentation/blob/master/Running-Mastodon/Production-guide.md][官方指南]] 上有很详尽的步骤说明，我就简单补充一些只适用于 Arch Linux 的部分。

**** 软件包依赖
我把所有依赖以及相对应的 Arch Linux 软件包都列了出来。完全没有手动克隆 git 仓库的必要。 =npm= 会在安装过程中用到，但没有在官方指南中列出。

| 依赖                                  | 软件包                                                                                        |
| =node.js= 6.x                         | [[https://www.archlinux.org/packages/community/x86_64/nodejs-lts-boron/][=nodejs-lts-boron=]] |
| =yarn=                                | [[https://www.archlinux.org/packages/community/any/yarn/][=yarn=]]                            |
| =imagemagick=                         | [[https://www.archlinux.org/packages/extra/x86_64/imagemagick/][=imagemagick=]]               |
| =ffmpeg=                              | [[https://www.archlinux.org/packages/extra/x86_64/ffmpeg/][=ffmpeg=]]                         |
| =libprotobuf= 和 =protobuf-compiler= | [[https://www.archlinux.org/packages/?sort=&q=protobuf&maintainer=&flagged=][=protobuf=]]     |
| =nginx=                               | [[https://www.archlinux.org/packages/extra/x86_64/nginx/][=nginx=]]                           |
| =redis=                               | [[https://www.archlinux.org/packages/community/x86_64/redis/][=redis=]]                       |
| =postgresql=                          | [[https://www.archlinux.org/packages/extra/x86_64/postgresql/][=postgresql=]]                 |
| =nodejs=                              | [[https://www.archlinux.org/packages/community/x86_64/nodejs/][=nodejs=]]                     |
| =rbenv=                               | [[https://aur.archlinux.org/packages/rbenv/][=rbenv=]]                                        |
| =ruby-build=                          | [[https://aur.archlinux.org/packages/ruby-build/][=ruby-build=]]                              |
| =npm=                                 | [[https://www.archlinux.org/packages/community/any/npm/][=npm=]]                              |

在安装 =rbenv= 后，我需要把 =eval "$(rbenv init -)"= 加入 =.bashrc= 或 =.zshrc= 中（安装脚本也会提示这一步骤）。

**** Mastodon
创建用户 =mastodon= 并用 =visudo= 把该用户加入 =sudoers= 。
#+BEGIN_SRC sh
  useradd -m -G wheel -s /bin/bash mastodon
#+END_SRC

接下来就可以克隆 Mastodon 的 git 仓库并开始 [[https://github.com/tootsuite/documentation/blob/master/Running-Mastodon/Production-guide.md#nodejs-and-ruby-dependencies][安装 node.js 和 ruby 的依赖]] 了。在这一过程中会用到 =npm= 。我在运行 =yarn= 时，遇到了一个 =ENONT= 错误：无法找到 =./.config/yarn/global/.yarnclean= 。手动创建了迷失的文件解决了这个错误。

**** PostgreSQL
除了安装 =postgresql= 软件包外, 我遵循 [[https://wiki.archlinux.org/index.php/PostgreSQL][Arch Wiki]] 里的步骤初始化了数据库集群：

#+BEGIN_SRC sh
  $ sudo su postgres
  [postgres]$ initdb --locale $LANG -E UTF8 -D '/var/lib/postgres/data'
#+END_SRC

在开始并启用 =postgresql.service= 后，我就可以以用户 =postgres= 的身份登录 =psql= 命令行并给 Mastodon 建立用户了（可以使用 =psql= 命令 =\du= 来确认用户列表）：

#+BEGIN_SRC sh
  $ sudo su postgres
  [postgres]$ psql
  [psql]# CREATE USER mastodon CREATEDB;
  [psql]# \q
#+END_SRC

端口设置可以在 =postgresql.service= 里找到，这会在编辑 =.env.porduction= 时用到。

**** Redis
和 =postgresql= 差不多，我安装了 =redis= ，开始／启用了 =redis.service= 。端口选择和允许连接的地址都可以在 =/etc/redis.conf= 里设置。

**** Nginx 和 Let's Encrypt
官方指南已经提供了很详尽的步骤，这里不再赘述。

**** =.env.production=
照配置文件里的说明做就可以了。我唯一弄错的地方是连接 =postgresql= 所需的 =DB_HOST= 。在查看 =postgresql.service= 的状态后，我找到了正确的路径， =/run/postgresql= 。

**** 计划进程和缓存清理
照官方指南做就好。我安装了 [[https://www.archlinux.org/packages/core/x86_64/cronie/][=cronie=]] 来安排 cron 作业。

*** 使用感受
网页版界面很不错，我很喜欢可以一边刷时间线一边慢慢写嘟文这一点（而不是在被迫停留在页面顶端）。我在尝试了数个 Mastodon 手机客户端后选定了 Pixiv 开发的 [[https://pawoo.net/about][Pawoo]] 。到目前为止， Mastodon 给我的感觉是一个比 Twitter 更加舒适、更能激发我写东西的平台。我试着推动自己每隔几天就写一条嘟文。虽然目前为止我写的大都是跑步的记录，但我会渐渐丰富我的嘟文内容的。

我很希望看到 Mastodon 对多语言嘟文提供支持。目前我用的办法是给中文和英文的嘟文打上不同的标签，但这么做不仅使嘟文更加臃肿，也使得我的时间线对大部分人来说可读性只有 50% 。可惜的是，目前的诸多社交网络里只看到 [[https://code.facebook.com/posts/597373993776783][Facebook]] 对此提供了支持。

在网站页脚，我已经把 Twitter 换成了我的[[https://mstdn.shimmy1996.com/@shimmy1996][Mastodon 页面]] ，随时欢迎各位来访。

* DONE My Keyboards 2018 Edition
:PROPERTIES:
:EXPORT_HUGO_CUSTOM_FRONT_MATTER: :date 2018-03-17 :slug my-keyboards-2018-edition
:END:

** DONE en
:PROPERTIES:
:EXPORT_TITLE: My Keyboards 2018 Edition
:EXPORT_FILE_NAME: 2018-03-18-my-keyboards-2018-edition.en.md
:END:

As part of my effort to tick off the last remaining item on my site roadmap, I read through some old keyboard-related posts from my WordPress blog and decided to give them an uplift to include more recent experiments.

*** The First Crispy Clack
My very first mechanical keyboard is a WASD v2 104 key with Cherry MX Blue switches that I got in 2014. I picked WASD mainly because of their keyboards' minimal look and keycap customization options. I also got my first 60% in 2014, a Poker II with Cherry MX Brown. Switch selection were more limited back then, seemingly because of potential issues with Cherry's patent. Of course, switch choices is only limited if we restrict ourselves to Cherry MX compatibles, but most alternatives (Matias, Topre, buckling spring to name a few) were even harder to come by in an commonly available package that I liked.

A GH60 based 60% that I frankensteined together became my main keyboard at first. I used Cherry MX Clear switches with 62g springs (ErgoClear) on them, mostly for the fun factor instead of preference. I also found myself tinkering with the layout a lot more often than when I had the Poker II. As great as Poker II's built-in macros mapping sounds, I could never remember all the steps without taking a moment to peruse the manual. I also found myself setting macros up and yet completely forget about them ever since. With GH60's firmware, at the very least I have the configuration files to remind me of the new bindings I set up. Even with this shiny new toy though, my early experiments with keyboard layouts still had only limited success. The layout of a 60% is too standard in my opinion to justify significant changes (while maintaining QWERTY layout), i.e. there isn't really a good location to move Enter to. The few tweaks I ended up making were numpad/function key mapping and swapping out Caps Lock for Control, which at best makes my GH60 on par with any random keyboard with [[https://www.x.org/wiki/XKB/][xkb]].

On a side note, I once aspired to collect keyboards of all form factors, but soon discovered it to be a highly impractical and expansive exercise. Thus far among the more common layouts, I either owned or tried 104 key, 96 key, 87 key, 75 key, 60 key, and 40 key keyboards. Majority of these differs very little experience wise for me, except for 60% or 40%, where a bit of creativity is required to fit all the desired keys.

*** ErgoDox and Planck
The first keyboard ever to trigger me to give deeper thoughts into my keyboard layout is the ErgoDox. The ErgoDox boasts a layout drastically different from traditional keyboards, and because of this, offers great flexibility over key placements: I can immediately spot seven sensible locations for the Enter key (original pinky location, four 2u keys at the thumb clusters and the lower two 1.5u vertical keys in the center). I've been using ErgoDox almost exclusively since 2015, and have grown to like it even more as I started using Emacs - having access to both Control and Alt/Meta key on the home row just feels awesome.

#+CAPTION: My ErgoDox Base Layer Layout
[[/img/posts/2018/my-keyboards-2018-edition-01.png]]

I still feel I am under-utilizing the keyboard's capabilities though. As you might tell, I don't know what to do with some of the thumb cluster keys. I currently have three extra layers set up: one for function keys, one for numpad, and another for a modified Dvorak layout. I haven't spend too much time on the Dvorak layer yet, but I am curious about potential benefits of decreased finger motion. Speaking of ergonomics, a perhaps uninteded benefit of ErgoDox's design is that it frees up the center of my desk, so that I can still read and write normally without a super deep desk.

#+CAPTION: My ErgoDox Dvorak Layer Layout
[[/img/posts/2018/my-keyboards-2018-edition-02.png]]

Planck is another keyboard that I've taken some thoughts designing layout for. It is pretty surprising what a 40% board is actually capable of. However, using Planck is a lot less comfortable just because of how small it is - ErgoDox on the other hand allows me to rest my arms in more natural positions, instead of cramming my hands together. That being said, I would imagine a Let's Split - basically a Planck split in halves - to work fairly well.

#+CAPTION: My Planck Layout
[[/img/posts/2018/my-keyboards-2018-edition-03.png]]

*** Keycap Craze
Ever since I discovered Geekhack, I would routinely refresh the groupbuy or interest check section for new keycap sets that other users designed. I gradually went from sets with flashy colors to those with a more muted and uniform look. I also prefer uniform keycap profiles (like DSA) with text legends than those with height gradients and graphical legends, although I find it really hard to appreciate blank keycaps. Getting a full set of keycaps with matching legends for ErgoDox is certainly no easy task (unlike Planck which is almost entirely consisted of 1u keys), and all these quirks I have made keycap shopping increasingly difficult.

*** My Own Keyboard/Layout
I've thought about creating my own keyboard occasionally. As perfect as ErgoDox
may seem, it is somewhat bulky, and I find the thumb cluster a bit hard to
reach. For quite some time I used ~C-Home~ and ~C-End~ to move to top/bottom of a
file in Emacs, and that caused pain in my thumb joint as I need to stretch hard
to reach both keys (that went away when I found ~M-<~ and ~M->~ though). A slim down version of ErgoDox with more compact thumb clusters might just be the perfect keyboard. By the way, I have never before find wireless keyboard necessary in any way, but since ErgoDox features a split design, a wireless version of it can be used while lying down Nintendo-Switch-style, which would be pretty awesome.

Since I started using Emacs as my main editor, I've been taking statistics of my key-presses with =keyfreq=. When I have gathered enough data, I might look into customizing my layout even further to suit my needs.

*** Pixel Art
Like many Geekhackers out there, I made a pixel art of my keyboards and used it as my Geekhack signature.

#+CAPTION: Pixel Art of My Keyboards I, 2015
[[/img/posts/2018/my-keyboards-2018-edition-04.png]]

#+CAPTION: Pixel Art of My Keyboards II, 2015
[[/img/posts/2018/my-keyboards-2018-edition-05.png]]

Drawing pixel art for keyboard is a fairly interesting exercise, since it is impossible to get the ratios exactly right, I needed to strike a balance between accuracy and simplicity. I will give this a long due update when I have time.

** DONE zh
:PROPERTIES:
:EXPORT_TITLE: 我的键盘 2018 版
:EXPORT_FILE_NAME: 2018-03-18-my-keyboards-2018-edition.zh.md
:END:

为了完成主页施工计划上的最后一条项目，我重新浏览了旧博客里关于键盘的日志并决定翻新这些文章，同时加入一些近期的新尝试。

*** 入门
我在 2014 年入手了第一块机械键盘，使用 Cherry MX 青轴的 WASD v2 104 键键盘。我选了 WASD 的主要原因是他们键盘较为简约的外形和客制化键帽的服务。我在 2014 年还入手了第一块 60% 键盘，使用 Cherry MX 茶轴的 Poker II 。在那时候可能由于 Cherry 的专利尚未过期，所以键盘轴的选择要比现在少得多。当然如果不考虑 Cherry MX 兼容性，替代品还是有的（ Matias ， Topre ， IBM 弹簧轴等），但入手更加困难。

我最初的主力是一块我七拼八凑起来的基于 GH60 的 60% 键盘。我使用的键盘轴是改装了 62 克弹簧的 Cherry MX 白轴（ ErgoClear ），这更多的只是想尝试键盘轴改装而不是因为偏好。除此之外，我发觉自己比之前用 Poker II 的时候更经常修改键盘布局了。虽然 Poker II 自带的宏编辑功能听上去很棒，但复杂的步骤使得我从来没有在不看说明书的情况下成功完成过编辑。而就算我废了老大力气完成了宏的设定，我过一段时间就会把宏的存在抛在脑后。相比之下，编辑 GH60 的固件后，至少我还能查看设定文件来回忆自己的设定。我早期修改键盘布局的尝试并不太成功：在我看来， 60% 键盘的键位布局太标准了，以至于（在保持 QWERTY 布局下）任何大范围修改都会让人觉得别扭。举个例子：我完全没法找到第二个适合回车键的位置。我所作的布局修改大多只是数字小键盘和功能键的映射以及交换大写锁定和控制键，完全没发挥出 GH60 的潜能，充其量只不过和使用了 [[https://www.x.org/wiki/XKB/][xkb]] 的普通键盘旗鼓相当。

顺便一提，我曾经想过要收集所有键数布局的键盘，但很快的发现这是一个不切实际且烧钱的想法。目前为止在常见的键数布局中，我尝试过 104 键， 96 键， 87 键， 75 键， 60 键，和 40 键键盘。这当中的绝大多数对我来说在体验上并没有太大区别，除了 60% 或 40% ：要想把所有标准键放上去是需要动一番脑筋的。

*** ErgoDox 和 Planck
ErgoDox 是第一个促使我真正下心思选择键盘布局的键盘。正是由于布局和传统键盘相差甚远， Ergodox 在键位布局选择上提供了很高的自由度：我一眼就能找到七个适合回车键的位置（传统右侧小拇指位，拇指区的四个 2u 键位，以及中心偏下的两个 1.5u 键位）。从 2015 开始，我就几乎只使用 ErgoDox 了。 ErgoDox 的好处在我开始使用 Emacs 后更加明显：能够轻而易举地够到控制键和转换键的感觉非常棒。

#+CAPTION: 我的 ErgoDox 基本层布局
[[/img/posts/2018/my-keyboards-2018-edition-01.png]]

ErgoDox 还有很多潜力没有被我发掘出来。如你所见，我还没有想出拇指区部分键位的最佳用处。目前除了基本层外，我额外设置了三层键位布局：一层用于功能键，一层用于数字小键盘，最后一层是经过修改的 Dvorak 布局。我还没有在 Dvorak 层上花太多时间，不过我对 Dvorak 减少手指移动次数的功效很有兴趣。说到人体工学， ErgoDox 设计有个额外的好处：我书桌的正中央终于可以从键盘的统治下空出来了，就算没有一张超级深的桌子我也可以不受键盘干扰正常看书。

#+CAPTION: 我的 ErgoDox Dvorak 层布局
[[/img/posts/2018/my-keyboards-2018-edition-02.png]]

Planck 是另一块让我下心思设计布局的键盘。 40% 键盘所能塞下来的东西其实多的让人吃惊。但是使用 Planck 时的舒适性不可避免地被它的尺寸所妨碍了 - 相比之下，使用 ErgoDox 这种分体键盘时两手可以保持更为自然的姿势，而不是以奇怪的角度挤在一起。我觉得 Let's Split - 基本上就是分体版的 Planck - 会是个不错的选择。

#+CAPTION: 我的 Planck 布局
[[/img/posts/2018/my-keyboards-2018-edition-03.png]]

*** 键帽狂热期
在我发现了 Geekhack 论坛后，我在很长一段时间里都会疯狂刷新团购和兴趣调查版，以收集其他用户所设计的客制键帽情报。我发现自己的兴趣逐渐地从色彩对比强烈的配色转向了更为统一，柔和的设计。在键帽形状的选择上，我也偏好没有高低梯度的类型，比如 DSA 。键帽图样上我更喜欢文字而非图案，有意思的是我并不觉得空白键帽有多么值得欣赏。这些癖好使得我的寻找键帽之旅异常困难：要想给 ErgoDox 配齐一整套图样相称的键帽可不是什么容易的事（ Planck 因为全是 1u 键，所以要容易得多）。

*** 设计自己的键盘／布局
我有时会冒出设计自己的键盘的念头。 ErgoDox 已经很接近我理想中的键盘了，但是它还
是有点笨重，而且拇指区边缘的键比较难按到。我原先一直在 Emacs 里使用 ~C-Home~ 和
~C-End~ 来移动光标到文件开头／结尾，这两个键位组合使我不得不尽力伸展大拇指，导致
关节有些酸痛（直到我发现 ~M-<~ 和 ~M->~ 才是正确的打开方式）。一个更加小巧，拇指区键位更加紧凑的 ErgoDox 应该就是我眼中完美的键盘了。对了，虽然我以前从来没有觉得无线键盘有多么必要，但因为 ErgoDox 的分体式设计，如果它有无线版本，我就可以像使用任天堂 Switch 那样躺在床上打字了。

自从我开始使用 Emacs 作为主力文本编辑器，我就一直在使用 =keyfreq= 来记录每个键／组合键的使用频率。在我收集了足够多的数据后，我会以此为根据来调整我的键盘布局。

*** 键盘像素画
我之前跟风 Geekhack 众，也给我的键盘画了像素画作为签名。

#+CAPTION: 我的键盘像素画 I
[[/img/posts/2018/my-keyboards-2018-edition-04.png]]

#+CAPTION: 我的键盘像素画 II
[[/img/posts/2018/my-keyboards-2018-edition-05.png]]

给键盘画像素画其实挺有意思，要想保持精确的比例几乎是不可能的，这就需要在精准和简约之间作微妙的平衡。我有时间时会继续更新这些像素画的。

* DONE Fun With Fonts In Emacs
:PROPERTIES:
:EXPORT_DATE: 2018-06-24
:EXPORT_HUGO_SLUG: fun-with-fonts-in-emacs
:END:

** DONE en
:PROPERTIES:
:EXPORT_FILE_NAME: 2018-06-24-fun-with-fonts-in-emacs.en.md
:EXPORT_TITLE: Fun With Fonts in Emacs
:END:

I finally took some time to look at the my font configurations in Emacs and
cleaned them up as much as possible. This dive into the rabbit hole have been
tiring yet fruitful, revealing the cravat of typesetting that I didn't know
before, especially for CJK characters.

I primarily use Emacs by running a daemon and connecting to it via a graphical
=emacsclient= frame, and I am attempting to tackle three major problems: I don't
have granular control over font mapping, glyph widths are sometimes inconsistent
with character widths, and emoji show up as weird blocks. Terminal Emacs doesn't
suffer as much from these problems, yet I don't want to give away the nice perks
like system clipboard access and greater key binding options, so here goes
nothing.

*** Font Fallback Using Fontsets
Ideally, I want to specify two sets of fonts, a default monospace font and a
CJK-specific font. Here's how I originally specified the font in Emacs:
#+BEGIN_SRC emacs-lisp
  (setq default-frame-alist '((font . "Iosevka-13")))
#+END_SRC

The method above obviously leaves no ground for fallback fonts. However, it
turns out I can specify the =font= to be a fontset instead of an individual
font. According to [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Fontsets.html][Emacs Manual]], a fontset is essentially a mapping from Unicode
range to a font or hierarchy of fonts and I can [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Modifying-Fontsets.html][modify]] one with relative ease.

Sounds like an easy job now? Not so fast. I don't really know which fontset to
modify: fontset behavior is quirky in that the fontset Emacs ends up using seems
to differ between =emacsclient= and normal =emacs=, between terminal and
graphical frames, and even between different locales. While there is a way to
get the current active fontset (=(frame-parameter nil 'font)=), this method is
unreliable and may cause errors like [[https://lists.gnu.org/archive/html/emacs-devel/2006-12/msg00285.html][this one]].

After all kinds of attempts and DuckDuckGoing (that really rolled right off the
tongue, and no, I am [[https://www.reddit.com/r/duckduckgo/comments/8cm51u/what_ing_verb_do_you_use_for_duckduckgo/][not the first one]]), I finally found the [[https://stackoverflow.com/questions/17102692/using-a-list-of-fonts-with-a-daemonized-emacs][answer]]: just define
a new fontset instead of modifying existing ones.
#+BEGIN_SRC emacs-lisp
  (defvar user/standard-fontset
    (create-fontset-from-fontset-spec standard-fontset-spec)
    "Standard fontset for user.")

  ;; Ensure user/standard-fontset gets used for new frames.
  (add-to-list 'default-frame-alist (cons 'font user/standard-fontset))
  (add-to-list 'initial-frame-alist (cons 'font user/standard-fontset))
#+END_SRC

I won't bore you with the exact logic just yet, as I also made other changes to
the fontset.

**** Displaying Emoji
Solution to emoji display is similar—just specify a fallback font with emoji
support—or so I thought. I tried to use Noto Color Emoji as my emoji font,
only to find Emacs does not yet support colored emoji font. Emacs used to
support colored emoji on macOS, but this functionality was later [[https://github.com/emacs-mirror/emacs/blob/emacs-25.1/etc/NEWS#L1723][removed]].

I ended up using [[http://users.teilar.gr/~g1951d/][Symbola]] as my emoji fallback font (actually I used it as a
fallback for all Unicode characters), which provided comprehensive coverage over
[[https://unicode.org/Public/emoji/11.0/emoji-test.txt][all the emoji]] and special characters. Also note that since Emacs 25,
customization to the =symbols= [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Charsets.html][charset]], which contains puncation marks, emoji,
etc., requires [[https://github.com/emacs-mirror/emacs/blob/emacs-25/etc/NEWS#L58][some extra work]]:
#+BEGIN_SRC emacs-lisp
  (setq use-default-font-for-symbols nil)
#+END_SRC

There does exist a workaround for colored emoji though, not with fancy fonts,
but by replacing Unicode characters with images. [[https://github.com/iqbalansari/emacs-emojify][=emacs-emojify=]] is a package
that provides this functionality. I ultimately decided against it as it does
slow down Emacs quite noticeably and the colored emoji image library is not as
comprehensive.

**** Quotation Marks
I've always used full-width directional curly quotation marks ("“”" and
"‘’") when typing in Chinese, and ASCII style ambidextrous straight quotation
marks (""" and "'") when typing in English. Little did I know there really is no
such thing as full-width curly quotation marks: there is only one set of curly
quotation mark codepoints in Unicode (U+2018, U+2019, U+201C, and U+201D) and
the difference between alleged full-width and half-width curly quotation marks
is caused solely by fonts. There have been [[https://www.unicode.org/L2/L2014/14006-sv-western-vs-cjk.pdf][proposals]] to standardize the two
distinct representations, but for now I'm stuck with this ambiguous mess.

It came as no surprise that these curly quotation marks are listed under
=symbols= charset, instead of a CJK one, thus using normal monospace font
despite the fact that I want them to show up as full-width characters. I don't
have a true solution for this—being consistent is the only thing I can do, so
I forced curly quotation marks to display as full width characters by overriding
these exact Unicode codepoints in my fontset. I'm not really sure how I feel
when I then realized ASCII style quotation marks also suffered from
[[https://www.cl.cam.ac.uk/~mgk25/ucs/quotes.html][confusion]]—maybe we are just really bad at this.

My fallback font configurations can be found on both [[https://github.com/shimmy1996/.emacs.d#fontset-with-cjk-and-unicode-fallback][GitHub]] and [[https://git.shimmy1996.com/emacs.d/file/README.org.html#l158][Trantor Holocron]]
and I'll list them here just for sake of completeness:
#+BEGIN_SRC emacs-lisp
  (defvar user/cjk-font "Noto Sans CJK SC"
    "Default font for CJK characters.")

  (defvar user/latin-font "Iosevka Term"
    "Default font for Latin characters.")

  (defvar user/unicode-font "Symbola"
    "Default font for Unicode characters, including emojis.")

  (defvar user/font-size 17
    "Default font size in px.")

  (defun user/set-font ()
    "Set Unicode, Latin and CJK font for user/standard-fontset."
    ;; Unicode font.
    (set-fontset-font user/standard-fontset 'unicode
                      (font-spec :family user/unicode-font)
                      nil 'prepend)
    ;; Latin font.
    ;; Only specify size here to allow text-scale-adjust work on other fonts.
    (set-fontset-font user/standard-fontset 'latin
                      (font-spec :family user/latin-font :size user/font-size)
                      nil 'prepend)
    ;; CJK font.
    (dolist (charset '(kana han cjk-misc hangul kanbun bopomofo))
      (set-fontset-font user/standard-fontset charset
                        (font-spec :family user/cjk-font)
                        nil 'prepend))
    ;; Special settings for certain CJK puncuation marks.
    ;; These are full-width characters but by default uses half-width glyphs.
    (dolist (charset '((#x2018 . #x2019)    ;; Curly single quotes "‘’"
                       (#x201c . #x201d)))  ;; Curly double quotes "“”"
      (set-fontset-font user/standard-fontset charset
                        (font-spec :family user/cjk-font)
                        nil 'prepend)))

  ;; Apply changes.
  (user/set-font)
  ;; For emacsclient.
  (add-hook 'before-make-frame-hook #'user/set-font)
#+END_SRC

*** CJK Font Scaling
My other gripe is the width of CJK fonts does not always match up with that of
monospace font. Theoretically, full-width CJK characters should be exactly twice
of that half-width characters, but this is not the case, at least not in all
font sizes. It seems that CJK fonts provide less granularity in size, i.e. 16px
and 17px versions of CJK characters in Noto Sans CJK SC are exactly the same,
and does not increase until size is bumped up to 18px, while Latin characters
always display the expected size increase. This discrepancy means their size
would match every couple sizes, but different in between with CJK fonts being a
bit too small.

One solution is to specify a slightly larger default size for CJK fonts in the
fontset. However, this method would render =text-scale-adjust= (normally bound
to ~C-x C-=~ and ~C-x C--~) ineffective against CJK fonts for some reason. A
better way that preserves this functionality is to scale the CJK fonts up by
customizing =face-font-rescale-alist=:
#+BEGIN_SRC emacs-lisp
  (defvar user/cjk-font "Noto Sans CJK SC"
    "Default font for CJK characters.")

  (defvar user/font-size 17
    "Default font size in px.")

  (defvar user/cjk-font-scale
    '((16 . 1.0)
      (17 . 1.1)
      (18 . 1.0))
    "Scaling factor to use for cjk font of given size.")

  ;; Specify scaling factor for CJK font.
  (setq face-font-rescale-alist
        (list (cons user/cjk-font
                    (cdr (assoc user/font-size user/cjk-font-scale)))))
#+END_SRC

bWhile the font sizes might still go out of sync after =text-scale-adjust=, I am
not too bothered. The exact scaling factor took me a few trial and error to find
out. I just kept adjusting the factor until these line up (I found [[https://websemantics.uk/articles/font-size-conversion/][this table]]
really useful):
#+BEGIN_SRC
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
云云云云云云云云云云云云云云云云云云云云云云云云云云云云云云云云云云云云云云云云
雲雲雲雲雲雲雲雲雲雲雲雲雲雲雲雲雲雲雲雲雲雲雲雲雲雲雲雲雲雲雲雲雲雲雲雲雲雲雲雲
ㄞㄞㄞㄞㄞㄞㄞㄞㄞㄞㄞㄞㄞㄞㄞㄞㄞㄞㄞㄞㄞㄞㄞㄞㄞㄞㄞㄞㄞㄞㄞㄞㄞㄞㄞㄞㄞㄞㄞㄞ
ああああああああああああああああああああああああああああああああああああああああ
가가가가가가가가가가가가가가가가가가가가가가가가가가가가가가가가가가가가가가가가
#+END_SRC

Unfortunately, the CJK font I used has narrower Hangul than other full-width CJK
characters, so this is still not perfect—the solution would be to specify a
Hangul specific font and scaling factor—but good enough for me.

It took me quite some effort to fix what may seem like a minor annoyance, but at
least Emacs did offer the appropriate tools. By the way, I certainly wish I had
found [[https://www.emacswiki.org/emacs/FontSets][this article]] on Emacs Wiki sooner, as it also provides a neat write up of
similar workarounds.

** DONE zh
:PROPERTIES:
:EXPORT_FILE_NAME: 2018-06-24-fun-with-fonts-in-emacs.zh.md
:EXPORT_TITLE: 字体配置 Emacs 篇
:END:

我终于花了些时间清理我 Emacs 里一团糟的字体设定。在折腾这些设定的过程中，我了解
到了一些中日韩（ CJK ）字体排版上的豆知识。

我主要使用 Emacs 的方式是使用一个图形 =emacsclient= 窗口链接在后台运行的守护进程。
我所要解决的主要问题有三个：缺少精细控制字体映射的方法、字形宽度和字符宽度不一致、
emoji 时常显示为豆腐块。虽然终端 Emacs 不大受这些问题的影响，但我不想放弃图形
Emacs 的其他好处，例如系统剪贴板和更加丰富的键位选择，所以我只好迎难而上着手解决
这些问题。

*** 使用字体集（ Fontset ）设置后备字体
在最理想的状况下，我想指定两套字体，一套默认的等宽字体和一套专门显示中日韩字符的字
体。我原来是这么设定 Emacs 字体的：
#+BEGIN_SRC emacs-lisp
  (setq default-frame-alist '((font . "Iosevka-13")))
#+END_SRC

这种方法显然无法指定后备字体。不过 =font= 除了接受单一字体外，也可以接受字体集。
根据 [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Fontsets.html][Emacs手册]] ，字体集可以大致理解为从 Unicode 到字体的映射，并且我可以很容易地
[[https://www.gnu.org/software/emacs/manual/html_node/emacs/Modifying-Fontsets.html][修改]] 字体集。

听上去似乎很容易？且慢。我并不知道应该被修改的是哪一个字体集： Emacs 最终使用的
字体集似乎会因语言环境（ locale ）、使用图形还是终端窗口、使用 =emacsclient= 还
是 =emacs= 而变化。尽管有方法可以获得目前使用的字体集（ =(frame-parameter nil
'font)= ），但这 [[https://lists.gnu.org/archive/html/emacs-devel/2006-12/msg00285.html][并不完全可靠]] 。

在不少失败的尝试之后，我终于找到了 [[https://stackoverflow.com/questions/17102692/using-a-list-of-fonts-with-a-daemonized-emacs][答案]] ：直接定义一个新的字体集。
#+BEGIN_SRC emacs-lisp
  (defvar user/standard-fontset
    (create-fontset-from-fontset-spec standard-fontset-spec)
    "Standard fontset for user.")

  ;; Ensure user/standard-fontset gets used for new frames.
  (add-to-list 'default-frame-alist (cons 'font user/standard-fontset))
  (add-to-list 'initial-frame-alist (cons 'font user/standard-fontset))
#+END_SRC

由于我除了指定中日韩字体外还对字体集做了其他更改，我会在阐明所有改变后再贴出全部
设定。

**** 显示 Emoji
解决 emoji 显示的方法与中日韩文字类似——找到一款支持 emoji 的字体不就好了吗——至少
我是这么想的。我一开始试图使用 Noto Color Emoji 作为 emoji 用后备字体，但发现
Emacs 目前并不支持彩色 emoji 字体。 Emacs 曾经在 macOS 上支持彩色 emoji字体，但
后来 [[https://github.com/emacs-mirror/emacs/blob/emacs-25.1/etc/NEWS#L1723][移除]] 了。

我最后选择了 [[http://users.teilar.gr/~g1951d/][Symbola]] 作为 emoji 后备字体（事实上我把它设为了所有 Unicode 字符的
后备字体）。 Symbola 可以显示 [[https://unicode.org/Public/emoji/11.0/emoji-test.txt][所有 emoji]] 和许多特殊符号。还需要注意的一点是，在
Emacs 25 之后，要想在字体集中自定义包含了大部分标点、特殊符号、 emoji 的
=symbols= [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Charsets.html][字符集（ charset ）]]，需要[[https://github.com/emacs-mirror/emacs/blob/emacs-25/etc/NEWS#L58][一些额外的设置]]：
#+BEGIN_SRC emacs-lisp
  (setq use-default-font-for-symbols nil)
#+END_SRC

如果实在想要显示彩色 emoji 倒也不是完全没有办法，不过不是通过设置字体，而是将
Unicode 字符替换为图片。[[https://github.com/iqbalansari/emacs-emojify][=emacs-emojify=]] 就是一个提供这种功能的 Emacs 包。由于这
个包会给 Emacs 带来一定的延迟，而且大部分彩色 emoji 图片库并不完整，我最终决定不
予采用。

**** 引号风波
我一直习惯在书写中文时使用成对的全角弯引号（““””和“‘’”）以及在书写英文时
使用 ASCII 里的对称直引号（“"”和“'”）。然而我并不知道“全角弯引号”其实根本
不存在： Unicode 中只存在一组弯引号编码（ U+2018 、 U+2019 、 U+201C 、U+201D ），
而所谓的全角与半角弯引号之分完全是字体引起的。虽然已经有相关的 [[https://www.unicode.org/L2/L2014/14006-sv-western-vs-cjk.pdf][提案]] 建议将这两种
不同的表示方法标准化，但目前弯引号就是这么一个烂摊子。

了解来龙去脉之后，就不难理解为什么弯引号在 Emacs 里隶属 =symbol= 字符集而非某个
中日韩字符集了。这也导致这些弯引号会使用我的默认等宽字体并显示为半角字符。我并没
有从根本上解决这一问题的办法，所以为了保证显示风格和书写风格保持一致，我通过为特
定的 Unicode 编码指定字体将这些弯引号字符统一显示为全角。当我知道直引号其实也有
着 [[https://www.cl.cam.ac.uk/~mgk25/ucs/quotes.html][充满误会的过去]] 的时候，我已经不知道应该用什么表情来面对了——也许我们在这方面真
的很糟糕。

我的后备字体设置可以在 [[https://github.com/shimmy1996/.emacs.d#fontset-with-cjk-and-unicode-fallback][GitHub]] 和 [[https://git.shimmy1996.com/emacs.d/file/README.org.html#l158][川陀全息档案馆]] 上找到。为了日志的完整性，我在这里也放
一份：
#+BEGIN_SRC emacs-lisp
  (defvar user/cjk-font "Noto Sans CJK SC"
    "Default font for CJK characters.")

  (defvar user/latin-font "Iosevka Term"
    "Default font for Latin characters.")

  (defvar user/unicode-font "Symbola"
    "Default font for Unicode characters, including emojis.")

  (defvar user/font-size 17
    "Default font size in px.")

  (defun user/set-font ()
    "Set Unicode, Latin and CJK font for user/standard-fontset."
    ;; Unicode font.
    (set-fontset-font user/standard-fontset 'unicode
                      (font-spec :family user/unicode-font)
                      nil 'prepend)
    ;; Latin font.
    ;; Only specify size here to allow text-scale-adjust work on other fonts.
    (set-fontset-font user/standard-fontset 'latin
                      (font-spec :family user/latin-font :size user/font-size)
                      nil 'prepend)
    ;; CJK font.
    (dolist (charset '(kana han cjk-misc hangul kanbun bopomofo))
      (set-fontset-font user/standard-fontset charset
                        (font-spec :family user/cjk-font)
                        nil 'prepend))
    ;; Special settings for certain CJK puncuation marks.
    ;; These are full-width characters but by default uses half-width glyphs.
    (dolist (charset '((#x2018 . #x2019)    ;; Curly single quotes "‘’"
                       (#x201c . #x201d)))  ;; Curly double quotes "“”"
      (set-fontset-font user/standard-fontset charset
                        (font-spec :family user/cjk-font)
                        nil 'prepend)))

  ;; Apply changes.
  (user/set-font)
  ;; For emacsclient.
  (add-hook 'before-make-frame-hook #'user/set-font)
#+END_SRC

*** 中日韩字体大小比例
最后需要解决的问题就是中日韩字体字宽和等宽字体比例不一致的问题了。理论上全角的中
日韩字符应该是半角字符宽度的两倍，但这并不在所有字号下成立。看起来原因是中日韩字
体在字号上其实偷懒了：在使用 Noto Sans CJK SC 时， 16px 和 17px 大小的中日韩字符
是没有任何大小区别的，直到 18px 才会出现大一号的字形，不像拉丁字符始终表现出预期
的尺寸增幅。这一现象使得中日韩字符和拉丁字符在每隔数个字号后大小比例相称，但使用
夹在中间的字号时中日韩字符会略微偏小。

一种解决方式时在修改字体集时给中日韩字体设置一个稍大一些的默认字号。不过这会导致
=text-scale-adjust= （通常被绑定在 ~C-x C-=~ 和 ~C-x C--~ 上）对中日韩字体不生效。
一种更好的办法是修改 =face-font-rescale-alist= 设置缩放比例：
#+BEGIN_SRC emacs-lisp
  (defvar user/cjk-font "Noto Sans CJK SC"
    "Default font for CJK characters.")

  (defvar user/font-size 17
    "Default font size in px.")

  (defvar user/cjk-font-scale
    '((16 . 1.0)
      (17 . 1.1)
      (18 . 1.0))
    "Scaling factor to use for cjk font of given size.")

  ;; Specify scaling factor for CJK font.
  (setq face-font-rescale-alist
        (list (cons user/cjk-font
                    (cdr (assoc user/font-size user/cjk-font-scale)))))
#+END_SRC

虽然在使用 =text-scale-adjust= 后字体大小比例依然可能会乱掉，但我只要默认字号下
对齐就行。具体的缩放比例只能通过反复测试来确定。我用以下几行字符是否对齐来判断缩
放比例是否合适（这张 [[https://websemantics.uk/articles/font-size-conversion/][表格]] 会是很好的帮手）：
#+BEGIN_SRC
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
云云云云云云云云云云云云云云云云云云云云云云云云云云云云云云云云云云云云云云云云
雲雲雲雲雲雲雲雲雲雲雲雲雲雲雲雲雲雲雲雲雲雲雲雲雲雲雲雲雲雲雲雲雲雲雲雲雲雲雲雲
ㄞㄞㄞㄞㄞㄞㄞㄞㄞㄞㄞㄞㄞㄞㄞㄞㄞㄞㄞㄞㄞㄞㄞㄞㄞㄞㄞㄞㄞㄞㄞㄞㄞㄞㄞㄞㄞㄞㄞㄞ
ああああああああああああああああああああああああああああああああああああああああ
가가가가가가가가가가가가가가가가가가가가가가가가가가가가가가가가가가가가가가가가
#+END_SRC

不巧的是，我所使用中日韩字体的谚文比其他全角字符都要窄，所以最终结果仍不完美——解
决方案是再添加一个谚文专用的字体和缩放比例——不过对我来说够用了。

我在解决这些看似简单的问题上花的精力比想象的多不少，不过值得庆幸的是 Emacs 提供
了所需的各项工具。顺便一提， Emacs Wiki 上的 [[https://www.emacswiki.org/emacs/FontSets][这篇文章]] 也提供了一些类似的问题的解
决方案：要是我早一些看到，配置过程大概会顺利许多。

* DONE Construction Finished
:PROPERTIES:
:EXPORT_HUGO_CUSTOM_FRONT_MATTER: :date 2018-05-21 :slug construction-finished :latex true
:END:

** DONE en
:PROPERTIES:
:EXPORT_TITLE: Construction Finished
:EXPORT_FILE_NAME: 2018-05-21-construction-finished.en.md
:END:

After eight months, my blog have finally reached a place where I feel comfortable taking down the "under heavy construction" notice on my home page. In stead of out right deleting the site road map though, I'm stashing it into a blog post.

*** Site Road Map
- ☑ +Find new hosting location.+ Currently using DigitalOcean.
- ☑ Install Arch Linux on server.
- ☑ +Search for WP replacement.+ Hugo is pretty good.
- ☑ +Find a suitable theme.+ Currently using =hugo-xmin= , may consider forking it and write my own ( =soresu= ).
- ☑ Server side config, like =post-receive= for git auto deploy.
- ☑ Language switcher that does more than redirecting to home page.
- ☑ Enable Disqus.
- ☑ Support \(\LaTeX\) expressions via +MathJax+ KaTeX.
- ☑ Copy-paste fixed page contents from old site (and translate them).
- ☑ Enable https.
- ☑ Backup old WP site.
- ☑ Transfer domain to Google Domains and ensure DNS works as intended.
- ☑ Find out how to write with =org-mode= or R markdown.
- ☑ Configure multilingual support, including footer text, title, etc.
- ☑ Find out how to make =emacs= work with =fcitx= .
- ☑ Use +Google's Noto Sans font+ Oxygen Sans and +Source Code Pro+ Iosevka for code.
- ☑ Find a suitable icon/favicon.
- ☑ Improve templates for posts to display tags and categories.
- ☑ Cosmetic changes, i.e. no underlines for hyperlinks.
- ☑ Deal with some nuances in using =org-mode= with =hugo= , like how to get syntax highlighting to work properly.
- ☑ Host my own email.
- ☑ Customize =hugo new= to make it more useful, i.e. create multilingual versions directly.
- ☑ Self-host commenting system as a replacement of Disqus.
- ☑ Use Let's Encrypt's wildcard certificate.
- ☑ Restore/rewrite and translate some of the more valuable old posts.

*** What's on Home Page Now?
I already have an about page and a contact page for whatever I think people might be interested in knowing about myself, so I have no clue what I should put on home page. Since I found the old site road map to be a great way of reminding myself the stuffs I need to get done, I'll replace the road map with another to-do list: my goals for 2018. I am definitely not the most motivated kind of person, but seeing an unfinished to-do list every once in a while does get on my nerves. Let's see how well this is gonna work.

** DONE zh
:PROPERTIES:
:EXPORT_TITLE: 施工完成
:EXPORT_FILE_NAME: 2018-05-21-construction-finished.zh.md
:END:

历时八个月，我的博客终于到达了我觉得可以摘掉施工警告的程度。不过我并没有删除原先的站点施工计划，只不过把它移到了这篇日志里。

*** 施工计划
- ☑ +找一家新的服务器提供商+ 目前使用 DigitalOcean 。
- ☑ 在服务器上安装 Arch Linux 。
- ☑ +搜寻WP的替代品。+ Hugo 很不错。
- ☑ +找一个合适的主题。+ 目前使用 =hugo-xmin= ，考虑fork出来写成自己的主题（ =soresu= ）。
- ☑ 完成服务器端设置，比如添加 =post-receive= 来实现 =git= 自动部署。
- ☑ 可以切换 *当前页面* 语言版本的语言切换按钮。
- ☑ Disqus 支持。
- ☑ 用 +MathJax+ KaTeX 实现  \(\LaTeX\) 表达式支持。
- ☑ 把导航页的内容搬过来并翻译。
- ☑ https 支持。
- ☑ 备份原WP站点。
- ☑ 转移域名到 Google Domains ，并完成 DNS 设置。
- ☑ 尝试使用 =org-mode= 或者 R markdown 来写博客。
- ☑ 解决 =emacs= 不兼容 =fcitx= 的问题。
- ☑ 设置多语言支持，添加合适的翻译字符串。
- ☑ 使用 Google 的 Noto Sans 字体（拉丁字母使用 Oxygen Sans ），代码则使用 +Source Code Pro+ Iosevka 。
- ☑ 为站点和社交网站找一个合适的图标/头像。
- ☑ 改善文章页面模板使其显示标签和分类。
- ☑ 改善网站外观，比如隐藏超链接的下划线等。
- ☑ 架设自己的邮箱。
- ☑ 解决 =org-mode= 和 =hugo= 略不兼容的地方，比如代码高亮。
- ☑ 尝试把 =hugo new= 变得更有用一些，比如直接创建多语言版本等。
- ☑ 抛弃 Disqus 自己搭建评论系统。
- ☑ 使用 Let's Encrypt 的通配符证书。
- ☑ 把比较有价值的旧文章搬过来。

*** 现在主页上是啥？
大部分我觉得别人会感兴趣的有关我的信息都可以在关于或联系方式页面里找到，所以对于主页应该放些什么，我实在没啥好主意。由于我感觉之前的站点施工计划是个提醒自己的不错方式，我会用另外一个任务清单来取代以完成的施工计划：我在 2018 年想实现的目标。我绝对不是那种最有干劲的人，但每每看到一张未完成的任务清单，我的强迫症神经还是会跳一跳的。那么，就让我试试看这么做效果如何吧。
