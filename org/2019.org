#+HUGO_BASE_DIR: ../
#+HUGO_SECTION: ./posts
#+OPTIONS: author:nil

* TODO 2018 in Review
:PROPERTIES:
:EXPORT_HUGO_CUSTOM_FRONT_MATTER: :date 2019-01-03 :slug 2018-in-review
:END:

** DONE en
:PROPERTIES:
:EXPORT_TITLE: 2018 in Review
:EXPORT_FILE_NAME: 2019-01-03-2018-in-review.en.md
:END:

Before anything, happy New Year!

It's an interesting feeling when the time span of one year gradually becomes
shorter relative to the time that has already passed in one's life. If only the
actual length of one year also scales with one's age, perhaps we would feel more
of the excitement instead of anxiety during the New Year count down. That being
said, 2018 was a lot of fun for me, even without ray-tracing graphic cards.

*** The Amazing 2018
To quote my 2017 self:

#+BEGIN_QUOTE
If I've learned anything from my past failed plans, it would be to always
underestimate my own capabilities when planning...
#+END_QUOTE

Yeah, it's totally just that my estimates about the amount of free time I would
have was off, as can be seen from the status of my 2018 goals.

- [ ] Run 1000 miles. [405/1000]
- [ ] Finish a marathon.
- [ ] Write 20 blog posts. [10/20]
- [ ] Get the first signature for my PGP key.
- [ ] Install Gentoo.

Knowing that I can always change the 'publish date' of blog entries (thanks to
=hugo=), I grew into the bad habit of starting an article and just then shelving
it for months to come. When I finally remember that one unfinished article, I
frequently dismiss the idea as not really worth elaborating. Now that I think
about it, maybe this is exactly what blogs are for, providing a snapshot of
myself that I can look back later, whether my future self find it silly or 'not
really worth elaborating'.

The number of movie theater visits I had in 2018 probably accounts for 50% of my
lifetime total, and with double doses of disappointment from /Star Wars: The
Last Jedi/ and /Incredibles 2/. By the way, 2018 also saw 90% of my lifetime
popcorn consumption. I've never realized those can be such addicting.

Although not a marathon, I did ran my first trail half marathon in May. It was
the first time I've ever hit the wall while running, due to bad pacing and
unpreparedness for the weather. The race started mid afternoon on a scorchingly
hot day. After witnessing quite a few people stopped to walk in the first 2
miles, I started off quite a bit faster than my intended pace fueled by a stupid
sense of superiority, and hit the wall right at the mark of 4 miles. Fortunately
the feeling faded away as I walked the next half of the race, gulping ice-cold
Gatorade at every hydration point. However, the ice-cold Gatorade was another
trap—temperature dropped rapidly as sun started to set and my stomach started
to complain about all the chilly liquid. As the finish line appeared within 400
meters of my sight, my legs were hit by the strongest cramps I've ever
had. After barely making it through while being surpassed by 3 people right
before finish line, I could only be happy to learn that I was still not the last
one: actually, I'm even the first one in my age group (+whose size is one+). The
somewhat illegitimate feeling of compliment, mixed with a bit of salt and guilt
made the race a wondrous experience.

*** The Spectacular 2019
Since Google is deprecating Inbox in the coming March, I've lost my last excuse
for clinging to Gmail. I'll try to gradually fade out my Gmail usage for my own
email server.

On the front of searching for best solution for blog comments, quite a few
bloggers I follow have started embracing the [[https://indieweb.org/][IndieWeb]] and [[https://webmention.net/][Webmention]]
standards. In a lot of ways, Webmention was the exact thing I wanted: federated
blog comments, posts, and more. Yet I'm reluctant to move further away from a
static site, not to mentioning most easy-to-follow Webmention solutions I have
found relies heavily on third-party services. The IndieWeb standard though is
fairly intriguing. I've never had much use for [[https://keybase.io/][Keybase]] aside from it being a hub
linking most of my online presences (decryption and encryption does not work
without uploading PGP private keys, and I have no one to securely chat with),
perhaps I should just replace it with =rel=me= links.

Diving into C++17 was fairly enjoyable during the past year, so I'm looking into
learning other new programming languages. [[https://www.rust-lang.org/][Rust]] and [[https://julialang.org/][Julia]] have been on my radar
for a while, especially Rust. Having a full suite of officially supported tools
makes writing Rust a smooth and deeply satisfying experience. I'll try to dive
deeper into both languages and hopefully put them into some uses.

As for running and blog posts, I'll try to match 2018's numbers. On top of
those, I'm thinking about keeping a record of the books, music, and shows I've
read/listened/watched on this blog, along with my thoughts. I actually attempted
something similar during this blog's Wordpress days: I once setup a MediaWiki
instance for similar purposes, but lacked the motivation to continue maintaining
the entries. I'll keep it simple this time, and I should come up with a set of
rating system.

What should I do with the remaining 2018 goals? A separate wishlist is a pretty
good idea—let's go with that. As a stretch goal, I should probably clean my
desktop computer, which is stuffed with four-year-old dirt, cat hair, and dead
skin cells.

Here's to another spectacular 2.9e+17 radiation periods of Caesium-133!

** TODO zh
:PROPERTIES:
:EXPORT_TITLE: 回顾 2018
:EXPORT_FILE_NAME: 2019-01-03-2018-in-review.zh.md
:END:

* TODO Installing Gentoo
:PROPERTIES:
:EXPORT_HUGO_CUSTOM_FRONT_MATTER: :date 2019-01-27 :slug installing-gentoo
:END:

** DONE en
:PROPERTIES:
:EXPORT_TITLE: Installing Gentoo
:EXPORT_FILE_NAME: 2019-01-27-installing-gentoo.en.md
:END:

I finally bite the bullet and installed Gentoo on VirtualBox (totally not motivated by the front page wishlist), thereby achieving my ultimate digital @5c3n510n (or descent according to DistroWatch).

Jokes aside, the installation process is surprisingly pleasant: the [[https://wiki.gentoo.org/wiki/Handbook:Main_Page][Gentoo Handbook]] is wonderfully written, and seems to have a plan for everything that might go wrong. I like the Handbook more than ArchWiki's [[https://wiki.archlinux.org/index.php/Installation_guide][Installation Guide]] as it also details the rationale behind each step I took, which is often a fun read in its own right. I would go as far as saying the Gentoo Handbook is actually more beginner friendly, as it carefully assembles bits of information that are normally scattered all over the place, providing a great starting point for learning how to tame the operating system. Besides, Gentoo Handbook covers more than installation: it also contains other necessary setup processes to set up a usable system. I will be gradually replicating my current desktop setup to decide if a migration is worth the time.

My very first encounter with GNU/Linux operating systems is Ubuntu 12.04: one of my classmates (vacuuny/A2Clef) was installing it in school's computer labs. There was a time when I would switch between various Ubuntu variants every few days. I dual booted Windows and Ubuntu for a while before switching entirely to Ubuntu in 2014. Much annoyed by the Amazon ads, I tried out Arch Linux as part of my New Year's resolution in 2015. Even with a second computer to look up instructions, it still took me quite a while to adapt to the new system. I ranted "maybe I still haven't gotten the Arch way" in my old blog, but never looked back once I got the knack of it.

I still try out other distributions from time to time in VirtualBox, but never find them to offer much improvements compared with Arch beyond the setup processes, and even more so when considering the excellent documentation on ArchWiki (well now we have a contender). Once I have my desktop environment set up, the experience between distributions is not that different, but the distinctions kicks in when problems occur and I search online for troubleshooting tips. Having more up-to-date packages is another charm Arch has. More recently, the =systemd= controversy caused me to start shopping around for a new distribution to try out, not so much because of the actual security concerns, but just to see what it is like to use different init system: I mostly used GUI under Ubuntu (=apt-get= and =nano= was probably the only command I knew for the longest time) and Arch was already using =systemd= when I switched. Aside from Gentoo, the candidates include Void Linux and the BSDs. Void Linux was easy to set up with its installer wizard, yet I didn't feel compelled to move to it. Let's see if Gentoo would change my mind.

* TODO Trackpad and Swollen Batteries
:PROPERTIES:
:EXPORT_HUGO_CUSTOM_FRONT_MATTER: :date 2019-02-28 :slug trackpad-and-swollen-batteries
:END:

** DONE en
:PROPERTIES:
:EXPORT_TITLE: Trackpad and Swollen Batteries
:EXPORT_FILE_NAME: 2019-02-28-trackpad-and-swollen-batteries.en.md
:END:

For the last few weeks, the right click on my Dell XPS 13's trackpad is getting less responsive: the entire right half of the trackpad sunk around 2mm beneath the palm rest, making clicks hard to register. At first I dismissed it as normal wear, but it turned out that the swollen batteries lifted the left half of the trackpad to such a degree that the trackpad warped. I immediately ordered an OEM replacement (Dell JD25G) swapped out the swollen batteries. XPS 13 (9343) was a breeze to service. The screws that hold the bottom panel (a quite hefty hunk of aluminum) in place are all clearly visible and the component layout allows battery to be swapped with minimal disassembly. I also swapped out the WLAN card (Dell DW1560) for an Intel AC9560, whose drivers are in the mainline Linux kernel.

The trackpad felt normal after the battery swap, of course. However, the fact that average laptop battery starts to degrade around 18 months surprised me quite a bit. Mine lasting nearly four years is probably quite descent. Newer laptops uses prismatic cells (those slab shaped batteries also found in phones) instead of cylindrical ones, as can be found in my first laptop, Dell Vostro 3750. Roughly speaking, prismatic cells trade size for lifespan by emitting external casing and gas vents found on cylindrical cells. The battery swell is caused by gas build up, which might have been avoided in cylindrical cells with vents. It's interesting that (easily) removable batteries have largely disappeared in consumer laptops - even the large desktop replacements (to be fair, those spend most of the time plugged in anyways). The only consumer electronics that still almost always have removable batteries I can think of are cameras.

Because of the incident, I started to browse current laptops on the market as the new quad/hex core laptop CPUs are quite tempting an upgrade (my XPS 13 has a i5-5200U). I was not a huge fan of the latest XPS 13 (9380) mostly because of the port selection: I just don't have any USB Type-C devices, so the 1 Type-C plus 2 Type-A combination found on XPS 13 (9360) is superior in my opinion. Besides ports, the onboard WLAN card and removal of full-sized SD card slot also make the latest model less appealing.

I also came across the Let's Note line of laptops from Panasonic, which are reliable, lightweight business laptops that often comes with removable batteries and a wide spectrum of ports. If only they weren't so prohibitively expansive, doesn't have those ugly "Wheel Pads", and come with US keyboard layout, they are quite the ideal laptops. I like the aesthetics of 2016 CF-MX5 series the most, but that won't make much of an upgrade.

More realistic choices include HP's EliteBook, Lenovo's ThinkPad T series, and Dell's Latitude/Precision lines. I vetoed EliteBook because all of them had a huge glaring proprietary docking port that I might never use. Latitude 5491 seem to have cooling issues due to the 45W TDP CPUs, while Latitude 7390 and 7490 both seem quite descent, with options to disable Intel ME and official Linux support. ThinkPad T480 pretty much ticks everything on my list, but it seems that the next iteration T490 will no longer have the bridge battery system and only one SODIMM slot, pretty much like T480s.

Hunting for second-handed machines is also an option, but it defeats the purpose of the upgrade since my primary motivation is the new quad core CPUs. Some may argue our laptops are overpowered already, and indeed my XPS 13 still feels pretty snappy though, so I'm not in urgent need for an upgrade. However, I did come up with a list of what I want in a laptop in case the ideal candidate shows up someday.
- Good Linux driver support.
- Below 15 inch in size and low travel weight. XPS 13 converted me from a DTR enthusiast to an Ultrabook follower: it does feel nice to be able carry a laptop all day without feeling it.
- Non-Nvidia graphics. Both AMD and Intel has better open source driver support and I use my desktop for tasks heavily reliant on GPU.
- Reasonable battery life (6 hours or more) and removable battery.
- Not-too-radical port selections, not until all mouses and flash drives default to USB Type-C at least.
- Standard components and easy to upgrade, i.e. SODIMM slot for memory, PCIe for WLAN card/SSD.
- A nice trackpad. I'm rather insensitive to quality of laptop keyboards so anything marginally descent would do. It would be really cool to have an ErgoDox laptop though.
- Not-super-high-resolution display. I'm not too picky about screens either, but 4K feels like an utter overkill for laptops this size that provides marginal improvements while draining more power. I've always used 16:9 displays, but I'm open to trying out different ones.

* DONE enumerate() with C++
:PROPERTIES:
:EXPORT_HUGO_CUSTOM_FRONT_MATTER: :date 2019-04-27 :slug enumerate-with-c-plus-plus
:END:

** DONE en
:PROPERTIES:
:EXPORT_TITLE: enumerate() with C++
:EXPORT_FILE_NAME: 2019-04-27-enumerate-with-c-plus-plus.en.md
:END:

Quite a few programming languages provide ways to iterate through a container while keeping count of the number of steps taken, such as =enumerate()= in Python:
#+BEGIN_SRC python
  for i, elem in enumerate(v):
      print(i, elem)
#+END_SRC
and =enumerate()= under =std::iter::Iterator= trait in Rust:
#+BEGIN_SRC rust
  for (i, elem) in v.iter().enumerate() {
      println!("{}, {}", i, elem);
  }
#+END_SRC
This is just a quick note about how to do similar things in C++17 and later without declaring extra variables out of the for loop's scope.

The first way is to use a mutable lambda:
#+BEGIN_SRC c++
  std::for_each(v.begin(), v.end(),
                [i = 0](auto elem) mutable {
                    std::cout << i << ", " << elem << std::endl;
                    ++i;
                });
#+END_SRC
This could be used with all the algorithms that guarantees in-order application of the lambda, but I don't like the dangling =++i= that could get mixed up with other logic.

The second way utilizes structured binding in for loops:
#+BEGIN_SRC c++
  for (auto [i, elem_it] = std::tuple{0, v.begin()}; elem_it != v.end();
       ++i, ++elem_it) {
      std::cout << i << ", " << *elem_it << std::endl;
  }
#+END_SRC
We have to throw in =std::tuple= as otherwise compiler would try to create a =std::initializer_list=, which does not allow heterogeneous contents.

The third least fancy method is to just calculate the distance every time:
#+BEGIN_SRC c++
  for (auto elem_it = v.begin(); elem_it != v.end(); ++elem_it) {
      auto i = std::distance(v.begin(), elem_it);
      std::cout << i << ", " << *elem_it << std::endl;
  }
#+END_SRC
Since we have to copy paste the starting point twice, I like other counter based approaches better.

In C++20, we have the ability to add an init-statement in ranged-based for loops, so we can write something like
#+BEGIN_SRC c++
  for (auto i = 0; auto elem : v) {
      std::cout << i << ", " << elem << std::endl;
      i++;
  }
#+END_SRC
Meh, not that impressive. The new =<ranges>= library provides a more appealing way to achieve this:
#+BEGIN_SRC c++
  for (auto [i, elem] : v | std::view::transform(
           [i = 0](auto elem) mutable { return std::tuple{i++, elem}; })) {
      std::cout << i << ", " << elem << std::endl;
  }
#+END_SRC

I like the structured binding method and the =<ranges>= based method the most. It would be even better though if we can get a =std::view::enumerate= to solve this problem once and for all.

** DONE zh
:PROPERTIES:
:EXPORT_TITLE: 用 C++ 来 enumerate()
:EXPORT_FILE_NAME: 2019-04-27-enumerate-with-c-plus-plus.zh.md
:END:

不少编程语言都提供了在迭代容器的同时记录步数的方法，例如 Python 的 =enumerate()= ：
#+BEGIN_SRC python
  for i, elem in enumerate(v):
      print(i, elem)
#+END_SRC
以及 Rust 里 =std::iter::Iterator= 特性下的 =enumerate()= ：
#+BEGIN_SRC rust
  for (i, elem) in v.iter().enumerate() {
      println!("{}, {}", i, elem);
  }
#+END_SRC
这里记录了如何在 C++17 或更新的标准里尽量简洁地实现类似功能的办法。


第一种方法是使用一个可变的 lambda ：
#+BEGIN_SRC c++
  std::for_each(v.begin(), v.end(),
                [i = 0](auto elem) mutable {
                    std::cout << i << ", " << elem << std::endl;
                    ++i;
                });
#+END_SRC
这个方法使用于所有能够保证 lambda 有序执行的算法，但是我并不喜欢末尾很可能被混入其他逻辑的 =++i= 。

第二种方法是在 for 循环中使用结构化绑定：
#+BEGIN_SRC c++
  for (auto [i, elem_it] = std::tuple{0, v.begin()}; elem_it != v.end();
       ++i, ++elem_it) {
      std::cout << i << ", " << *elem_it << std::endl;
  }
#+END_SRC
为了不让编译器默认创建只允许同种内容的 =std::initializer_list= ，我们必须加上 =std::tuple= 。

第三种最朴实无华的办法是在循环的每一步计算指针距离：
#+BEGIN_SRC c++
  for (auto elem_it = v.begin(); elem_it != v.end(); ++elem_it) {
      auto i = std::distance(v.begin(), elem_it);
      std::cout << i << ", " << *elem_it << std::endl;
  }
#+END_SRC
由于这种方法需要我们在两个地方指定初始指针，我更喜欢之前提到的基于计数器的方法。

在 C++20 中，我们可以在基于范围的 for 循环中加入初始化语句：
#+BEGIN_SRC c++
  for (auto i = 0; auto elem : v) {
      std::cout << i << ", " << elem << std::endl;
      i++;
  }
#+END_SRC
新加入的 =<ranges>= 库则提供了一种更加吸引人的实现方法：
#+BEGIN_SRC c++
  for (auto [i, elem] : v | std::view::transform(
           [i = 0](auto elem) mutable { return std::tuple{i++, elem}; })) {
      std::cout << i << ", " << elem << std::endl;
  }
#+END_SRC

我最喜欢基于结构化绑定和 =<ranges>= 库的方法。当然如果要是有 =std::view::enumerate= 来一劳永逸地解决这个问题就最好不过了。

* DONE Hello Darkness, My Old Friend
:PROPERTIES:
:EXPORT_HUGO_CUSTOM_FRONT_MATTER: :date 2019-09-15 :slug hello-darkness-my-old-friend
:END:

** DONE en
:PROPERTIES:
:EXPORT_TITLE: Hello Darkness, My Old Friend
:EXPORT_FILE_NAME: 2019-09-15-hello-darkness-my-old-friend.en.md
:END:

With system wide dark modes becoming commonplace, I took the effort to tweak the color scheme of my blog and added a dark mode specific one using =prefers-color-scheme= in CSS. I also toyed around the idea of adding a user toggle using JavaScript per instructions [[https://flaviocopes.com/dark-mode/][here]], but ultimately decided against it because of my (totally unjustified and groundless) distaste towards the language.

| Color Usage     | Light Theme | Dark Theme |
| Accent          | =#700000=   | =#8fffff=  |
| Background      | =#f7f3e3=   | =#080c1c=  |
| Text            | =#2e2d2b=   | =#d1d2d4=  |
| Code Background | =#e3dacb=   | =#1c2534=  |
| Border 1        | =#e7e3d3=   | =#181c2c=  |
| Border 2        | =#d7d3c3=   | =#282c3c=  |

Writing CSS is a such tiring endeavor, but on the bright side, picking colors is a surprisingly relaxing activity. The light mode color scheme now has reduced contrast, and I updated the isso style sheets with matching colors. Yes, I only inverted the colors in dark mode and did not reduce the font weights because of the peculiar way in which human vision work. Part of me already screams heresy when I look at the color codes formed by three numbers that seem to have no connection whatsoever—they are like dissonant chords that cause itches in brain—so I *need* them to at least sum up to a nice number.

Wissen ist Nacht!

** DONE zh
:PROPERTIES:
:EXPORT_TITLE: 你好黑暗，我的老朋友
:EXPORT_FILE_NAME: 2019-09-15-hello-darkness-my-old-friend.zh.md
:END:

由于越来越多的设备和软件都开始支持暗色模式，我调整了博客的配色并加入了用 CSS 的 =prefers-color-scheme= 实现的暗色主题。我也考虑了加入用户切换的功能（参考 [[https://flaviocopes.com/dark-mode/][这里]] 的教程），但是出于我对 JavaScript （毫无来由）的反感，我最后否定了这个主意。

| 颜色用途 | 亮色主题  | 暗色主题  |
| 强调     | =#700000= | =#8fffff= |
| 背景     | =#f7f3e3= | =#080c1c= |
| 文字     | =#2e2d2b= | =#d1d2d4= |
| 代码背景 | =#e3dacb= | =#1c2534= |
| 边框1    | =#e7e3d3= | =#181c2c= |
| 边框2    | =#d7d3c3= | =#282c3c= |

写 CSS 真是累人，不过好在挑选配色是一件挺让人放松的事。新的亮色主题有更低的对比度，我也更新了 isso 的样式表。是的，我的暗色主题只不过是亮色主题的反色版本，并没有降低文字粗细程度以照顾人类视力的某种古怪特性和其他细微的颜色调整。当我看到由三个似乎没有任何联系的数字形成的颜色代码时，我潜意识已经在大呼异端——它们就像不协和和弦一样让人头皮发麻——所以我 *需要* 它们至少加起来是一个不那么差劲的数。

知识就是黑夜！

* TODO Fun with Fonts on the Web
:PROPERTIES:
:EXPORT_DATE: 2019-12-01
:EXPORT_HUGO_SLUG: fun-with-fonts-on-the-web
:END:

** DONE en
:PROPERTIES:
:EXPORT_FILE_NAME: 2019-12-01-fun-with-fonts-on-the-web.en.md
:EXPORT_TITLE: Fun with Fonts on the Web
:END:

A more accurate version of the title probably should be "Fun with Fonts in Web Browsers", but oh well, it sounds cooler that way. Text rendering is [[https://gankra.github.io/blah/text-hates-you/][hard]], and it certainly doesn't help that we have a plethora of different writing systems (blame the Tower of Babel for that, I guess) which cannot be elegantly fitted into a uniform system. Running a bilingual blog doubles the trouble in font picking, and here's a compilation of the various problems I encountered.

*** SPAAAAACE!
Most browsers join consecutive lines of text in HTML to a single one with an added space in between, so
#+BEGIN_EXAMPLE
Line one and
line two.
#+END_EXAMPLE
renders to
#+BEGIN_EXAMPLE
Line one and line two.
#+END_EXAMPLE

Such a simplistic rule doesn't work for CJK languages where no separators is used between words. The solution is to specify the =lang= attribute for the page (or any specific element on the page) like so:
#+BEGIN_SRC html
  <html lang="zh">第一行和
  第二行。<html>
#+END_SRC
If your browser is smart enough (like Firefox), it will join the lines correctly. All the Blink based browsers, however, still stubbornly shove in the extra space, so it looks like I will be stuck in unwrapped source files like a barbarian for a bit longer. While not a cure-all solution, specifying the =lang= attribute still have the added benefit of enabling language-specific CSS rules, which comes in handy later.

*** Quotation Marks
As mentioned in a [[http://localhost:1313/en/posts/2018-06-24-fun-with-fonts-in-emacs/][previous post]], CJK fonts would render quotation marks as full-width characters, different from Latin fonts. This won't be a problem as long as a web page doesn't try to mix-and-match fonts: just use language specific font-stack like so:
#+BEGIN_SRC css
  body:lang(en) {
      font-family: "Oxygen Sans", sans-serif;
  }

  body:lang(zh) {
      font-family: "Noto Sans SC", sans-serif;
  }
#+END_SRC
Coupled with matching =lang= attributes, the story would have ended here. Firefox even allows you to specify default fonts on a per language basis, so you can actually get away with just the fallback values, like =sans-serif= or =serif=, and not even bother writing language specific CSS.

However, what if I want to use Oxygen Sans for Latin characters, Noto Sans SC for CJK characters? While seemingly an sensible solution, specifying font stack like so
#+BEGIN_SRC css
  body:lang(zh) {
      font-family: "Oxygen Sans", "Noto Sans SC", sans-serif;
  }
#+END_SRC
would cause the quotation marks to be rendered using Oxygen Sans, which displays them as half-width characters. The solution I found is to declare an override font with a specified =unicode-range= that covers the quotation marks,
#+BEGIN_SRC css
  @font-face {
      font-family: "Noto Sans SC Override";
      unicode-range: U+2018-2019, U+201C-201D;
      src: local("NotoSansCJKsc-Regular");
  }
#+END_SRC
and revise the font stack as
#+BEGIN_SRC css
  body:lang(zh) {
      font-family: "Noto Sans SC Override", "Oxygen Sans", "Noto Sans SC", sans-serif;
  }
#+END_SRC
Now we can enjoy the quotation marks in their full-width glory!

*** Slicing and Dicing
Font files are quite significant in size, and even more so for CJK ones: the Noto Sans SC font just mentioned is [[https://github.com/googlefonts/noto-cjk/blob/master/NotoSansSC-Regular.otf][over 8MB]] in size. No matter how determined I am to serve everything from my own server, this seems like an utter overkill considering the average HTML file size on my site is probably closer to 8KB. How does all the web font services handle this then?

Most web font services work by adding a bunch of [[https://developer.mozilla.org/en-US/docs/Web/CSS/@font-face][=@font-face=]] definitions into a website's style sheet, which pulls font files from dedicated servers. To reduce the size of files been served, Google Fonts slice the font file into smaller chunks, and declare corresponding =unicode-range= for each chunk under =@font-face= blocks (this is exactly how they handle [[https://fonts.googleapis.com/css?family=Noto+Sans+SC][CJK fonts]]). They also compress the font files into WOFF2, further reducing file size. On the other hand, [[https://fonts.adobe.com/][Adobe Fonts]] (previously known as Typekit) seem to have some JavaScript wizardry that dynamically determines which glyphs to load from a font file.

Combining best of both worlds, and thanks to the fact that this is a static site, it is easy to gather all the used characters and serve a font file containing just that. The tools of choice here would be pyftsubset (available as a component of [[https://pypi.org/project/fonttools/][fonttools]]) and GNU awk. Compressing font files into WOFF2 also requires Brotli, a compression library. Under Arch Linux, the required packages are [[https://www.archlinux.org/packages/community/any/python-fonttools/][python-fonttools]], [[https://www.archlinux.org/packages/core/x86_64/gawk/][gawk]], [[https://www.archlinux.org/packages/community/x86_64/brotli/][brotli]], and [[https://www.archlinux.org/packages/community/x86_64/python-brotli/][python-brotli]].

Here's a shell one-liner to collect all the used glyphs from generated HTML files:
#+BEGIN_SRC sh
  find -type f -name "*.html" -printf "%h/%f " | xargs -l awk 'BEGIN{FS="";ORS=""} {for(i=1;i<=NF;i++){chars[$(i)]=$(i);}} END{for(c in chars){print c;} }' > glyphs.txt
#+END_SRC
You may need to =export LANG=en_US.UTF-8= (or any other UTF-8 locale) for certain glyphs to be handled correctly. With the list of glyphs, we can extract the useful part of font files and compress them:
#+BEGIN_SRC sh
  pyftsubset NotoSansSC-Regular.otf --text-file=glyphs.txt --flavor=woff2 --output-file=NotoSansSC-Regular.woff2
#+END_SRC
Specifying =--no-hinting= and =--desubroutinize= can further reduce size of generated file at the cost of some aesthetic fine-tuning. A similar technique can be used to shrink down Latin fonts to include only ASCII characters (or keep the extended ASCII range with =U+0000-00FF=)
#+BEGIN_SRC sh
  pyftsubset Oxygen-Sans.ttf --unicodes="U+0000-007F" --flavor=woff2 --output-file=Oxygen-Sans.woff2
#+END_SRC
Once this is done, available glyphs can be checked using most font manager software, or this [[http://torinak.com/font/lsfont.html][online checker]] (no support for WOFF2 though, but you can convert into other formats first, such as WOFF).

I also played around the idea of actually dividing the glyphs into further chunks by popularity, so here's another one liner to get list of glyphs sorted by number of appearances
#+BEGIN_SRC sh
  find -type f -name "*.html" -printf "%h/%f " | xargs -l awk 'BEGIN{FS=""} {for(i=1;i<=NF;i++){chars[$(i)]++;}} END{for(c in chars){printf "%06d %s\n", chars[c], c;}}' | sort -r > glyph-by-freq.txt
#+END_SRC
It turns out my blog has around 1000 different Chinese characters, with roughly 400 of them appearing more than 10 times. Since the file sizes I get from directly a single subsetting is already good enough, I didn't bother proceeding with another split.

*** See the Web Through My Browser
With all the tricks in my bag, I was able to cut down the combined font file size to around 250KB, still magnitudes above that of an HTML file though. While it is nice to see my site appearing the same across all devices and screens, I feel the benefit is out of proportion compared to the 100-fold increase in page size.

Maybe it is just not worth it to force the choice of fonts. In case you want to see my site as I would like to see it, here are my go-to fonts:
- Proportional Latin font: [[https://github.com/KDE/oxygen-fonts][Oxygen Sans]]. Note that the KDE version has nuanced differences from the [[https://fonts.google.com/specimen/Oxygen][Google Fonts version]], and I like the KDE version much more.
- Proportional CJK font: [[https://www.google.com/get/noto/help/cjk/][Noto Sans CJK]].
- Monospace font: [[https://typeof.net/Iosevka/][Iosevka]], the ss09 variant, to be more exact.

* COMMENT Local Variables                                           :ARCHIVE:
# Local Variables: fill-column: 80 eval: (auto-fill-mode nil) eval: (add-hook
# 'after-save-hook #'org-hugo-export-subtree-to-md-after-save :append :local)
# End:
